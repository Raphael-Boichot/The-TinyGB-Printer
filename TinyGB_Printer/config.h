
/*****************************
 * SD CARD MODULE DEFINITIONS 
 *****************************/
//    SD card attached to SPI bus as follows on RP2040:
//   ************ SPI0 ************
//   ** MISO (AKA RX) - pin 0, 4, or 16
//   ** MOSI (AKA TX) - pin 3, 7, or 19
//   ** CS            - pin 1, 5, or 17
//   ** SCK           - pin 2, 6, or 18
//   ************ SPI1 ************
//   ** MISO (AKA RX) - pin  8 or 12
//   ** MOSI (AKA TX) - pin 11 or 15
//   ** CS            - pin  9 or 13
//   ** SCK           - pin 10 or 14

#define SD_MISO 8      // SD card SPI1
#define SD_CS 9        // SD card SPI1
#define SD_SCK 10      // SD card SPI1
#define SD_MOSI 11     // SD card SPI1
#define BTN_PUSH 12    // Define a PushButton to use to Force a new file in idle mode ///BOICHOT
#define LED_WS2812 16  // Pi pico waveshare zero RGB LED PIN, onboard LED ///BOICHOT
#define NUMPIXELS 1    // NeoPixel ring size (just internal LED here)
//#define CORE_0_VERBOSE   //for debug, better let only one core speaking at a time
#define PNG_OUTPUT

unsigned char B = 0x00;                               //palette Black
unsigned char DG = 0x55;                              //palette Dark Gray
unsigned char LG = 0xAA;                              //palette Light Gray
unsigned char W = 0xFF;                               //palette White
unsigned int PNG_upscaling_factor = 4;                //for png encoder
unsigned int Next_ID, Next_dir;                       //for directories and filenames
unsigned char printer_memory_buffer_core_0[9 * 640];  //Game Boy printer buffer of 9*640 bytes (maximum possible), core 0
unsigned char printer_memory_buffer_core_1[9 * 640];  //Game Boy printer buffer of 9*640 bytes (maximum possible), core 1
unsigned char BMP_image_color[144 * 160];             //color RGB image for BMP, real color known from palette (maximum possible), core 1
char png_storage_file_name[64];                       //character string to store images
char bmp_storage_file_name[64];                       //character string to store images
char storage_file_dir[64];                            //character string to store images
unsigned char inner_palette;                          //inner palette to use for core 1
unsigned char inner_lower_margin;                     //inner margin to use for core 1
unsigned char BMP_palette[4] = { W, LG, DG, B };      //colors as they will appear in the bmp file and display after dithering
unsigned char image_palette[4] = { 0, 0, 0, 0 };      //2 bpp colors refering to BMP_palette[4]
unsigned int DATA_bytes_counter = 0;                  //counter for data bytes
unsigned int BMP_bytes_counter = 0;                   //counter for data bytes
unsigned int offset_x = 0;                            //offsets for tile conversion in BMP file
unsigned char DATA_packet_counter = 0;                //counter for packets transmitted
unsigned char DATA_packet_to_print = 0;               //counter for packets transmitted for core 1
unsigned char local_byte_LSB = 0;                     //storage byte for conversion
unsigned char local_byte_MSB = 0;                     //storage byte for conversion
unsigned int tile_column, tile_line, pixel_line = 0;  //storage byte for conversion
unsigned char pixel_level = 0;                        //storage byte for conversion
unsigned long lines_in_bmp_file = 0;                  //to keep tack of image file length
uint8_t intensity = 150;                              //WS2812 intensity 255 is a death ray, 10 to 15 is normal
uint32_t SD_card_access_Color;
uint32_t BMP_decoder_color;
uint32_t PNG_decoder_color;
bool SDcard_READY = 0;
bool PRINT_flag = 0;
bool NEWFILE_flag = 1;
bool TEAR_mode = 0;
//////////////////////////////////////////////SD stuff///////////////////////////////////////////////////////////////////////////////////////////
void ID_file_creator(const char* path) {  //from fresh SD, device needs a "secret" binary storage file
                                          //this file may never be erased and is accessed frequently as it counts all images recorded with a unique ID
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
  if (!SD.exists(path)) {
    File Datafile = SD.open(path, FILE_WRITE);
    //start from a fresh install on SD
    Datafile.write(buf, 8);
    Datafile.close();
    Serial.println("// Creating a new configuration file");
  } else {
    Serial.println("// Configuration file yet existing");
  }
}

unsigned long get_next_ID(const char* path) {  //get the next file #
  uint8_t buf[4];
  File Datafile = SD.open(path);
  Datafile.read(buf, 4);
  Next_ID = ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3]));
  Datafile.close();
  return Next_ID;
}

unsigned long get_next_dir(const char* path) {  //get the next directory #
  uint8_t buf[4];
  File Datafile = SD.open(path);
  Datafile.read(buf, 4);  //dumps the 4 first bytes
  Datafile.read(buf, 4);
  Next_dir = ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3]));
  Datafile.close();
  return Next_dir;
}

void store_next_ID(const char* path, unsigned long Next_ID, unsigned long Next_dir) {  //store current file # and directory #
  uint8_t buf[4];
  File Datafile = SD.open(path, FILE_WRITE);
  Datafile.seek(0);
  buf[3] = Next_ID >> 0;
  buf[2] = Next_ID >> 8;
  buf[1] = Next_ID >> 16;
  buf[0] = Next_ID >> 24;
  Datafile.write(buf, 4);
  buf[3] = Next_dir >> 0;
  buf[2] = Next_dir >> 8;
  buf[1] = Next_dir >> 16;
  buf[0] = Next_dir >> 24;
  Datafile.write(buf, 4);
  Datafile.close();
}
//////////////////////////////////////////////SD stuff///////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////BMP stuff///////////////////////////////////////////////////////////////////////////////////////////
unsigned char BMP_header_generic[54] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

//BMP indexed palette for 8 bits RGB
const unsigned char BMP_indexed_palette[1024] = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 0x02,
                                                  0x02, 0x00, 0x03, 0x03, 0x03, 0x00, 0x04, 0x04, 0x04, 0x00, 0x05, 0x05, 0x05, 0x00, 0x06, 0x06,
                                                  0x06, 0x00, 0x07, 0x07, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x09, 0x09, 0x09, 0x00, 0x0A, 0x0A,
                                                  0x0A, 0x00, 0x0B, 0x0B, 0x0B, 0x00, 0x0C, 0x0C, 0x0C, 0x00, 0x0D, 0x0D, 0x0D, 0x00, 0x0E, 0x0E,
                                                  0x0E, 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x10, 0x10, 0x10, 0x00, 0x11, 0x11, 0x11, 0x00, 0x12, 0x12,
                                                  0x12, 0x00, 0x13, 0x13, 0x13, 0x00, 0x14, 0x14, 0x14, 0x00, 0x15, 0x15, 0x15, 0x00, 0x16, 0x16,
                                                  0x16, 0x00, 0x17, 0x17, 0x17, 0x00, 0x18, 0x18, 0x18, 0x00, 0x19, 0x19, 0x19, 0x00, 0x1A, 0x1A,
                                                  0x1A, 0x00, 0x1B, 0x1B, 0x1B, 0x00, 0x1C, 0x1C, 0x1C, 0x00, 0x1D, 0x1D, 0x1D, 0x00, 0x1E, 0x1E,
                                                  0x1E, 0x00, 0x1F, 0x1F, 0x1F, 0x00, 0x20, 0x20, 0x20, 0x00, 0x21, 0x21, 0x21, 0x00, 0x22, 0x22,
                                                  0x22, 0x00, 0x23, 0x23, 0x23, 0x00, 0x24, 0x24, 0x24, 0x00, 0x25, 0x25, 0x25, 0x00, 0x26, 0x26,
                                                  0x26, 0x00, 0x27, 0x27, 0x27, 0x00, 0x28, 0x28, 0x28, 0x00, 0x29, 0x29, 0x29, 0x00, 0x2A, 0x2A,
                                                  0x2A, 0x00, 0x2B, 0x2B, 0x2B, 0x00, 0x2C, 0x2C, 0x2C, 0x00, 0x2D, 0x2D, 0x2D, 0x00, 0x2E, 0x2E,
                                                  0x2E, 0x00, 0x2F, 0x2F, 0x2F, 0x00, 0x30, 0x30, 0x30, 0x00, 0x31, 0x31, 0x31, 0x00, 0x32, 0x32,
                                                  0x32, 0x00, 0x33, 0x33, 0x33, 0x00, 0x34, 0x34, 0x34, 0x00, 0x35, 0x35, 0x35, 0x00, 0x36, 0x36,
                                                  0x36, 0x00, 0x37, 0x37, 0x37, 0x00, 0x38, 0x38, 0x38, 0x00, 0x39, 0x39, 0x39, 0x00, 0x3A, 0x3A,
                                                  0x3A, 0x00, 0x3B, 0x3B, 0x3B, 0x00, 0x3C, 0x3C, 0x3C, 0x00, 0x3D, 0x3D, 0x3D, 0x00, 0x3E, 0x3E,
                                                  0x3E, 0x00, 0x3F, 0x3F, 0x3F, 0x00, 0x40, 0x40, 0x40, 0x00, 0x41, 0x41, 0x41, 0x00, 0x42, 0x42,
                                                  0x42, 0x00, 0x43, 0x43, 0x43, 0x00, 0x44, 0x44, 0x44, 0x00, 0x45, 0x45, 0x45, 0x00, 0x46, 0x46,
                                                  0x46, 0x00, 0x47, 0x47, 0x47, 0x00, 0x48, 0x48, 0x48, 0x00, 0x49, 0x49, 0x49, 0x00, 0x4A, 0x4A,
                                                  0x4A, 0x00, 0x4B, 0x4B, 0x4B, 0x00, 0x4C, 0x4C, 0x4C, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x4E, 0x4E,
                                                  0x4E, 0x00, 0x4F, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x50, 0x00, 0x51, 0x51, 0x51, 0x00, 0x52, 0x52,
                                                  0x52, 0x00, 0x53, 0x53, 0x53, 0x00, 0x54, 0x54, 0x54, 0x00, 0x55, 0x55, 0x55, 0x00, 0x56, 0x56,
                                                  0x56, 0x00, 0x57, 0x57, 0x57, 0x00, 0x58, 0x58, 0x58, 0x00, 0x59, 0x59, 0x59, 0x00, 0x5A, 0x5A,
                                                  0x5A, 0x00, 0x5B, 0x5B, 0x5B, 0x00, 0x5C, 0x5C, 0x5C, 0x00, 0x5D, 0x5D, 0x5D, 0x00, 0x5E, 0x5E,
                                                  0x5E, 0x00, 0x5F, 0x5F, 0x5F, 0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x61, 0x61, 0x00, 0x62, 0x62,
                                                  0x62, 0x00, 0x63, 0x63, 0x63, 0x00, 0x64, 0x64, 0x64, 0x00, 0x65, 0x65, 0x65, 0x00, 0x66, 0x66,
                                                  0x66, 0x00, 0x67, 0x67, 0x67, 0x00, 0x68, 0x68, 0x68, 0x00, 0x69, 0x69, 0x69, 0x00, 0x6A, 0x6A,
                                                  0x6A, 0x00, 0x6B, 0x6B, 0x6B, 0x00, 0x6C, 0x6C, 0x6C, 0x00, 0x6D, 0x6D, 0x6D, 0x00, 0x6E, 0x6E,
                                                  0x6E, 0x00, 0x6F, 0x6F, 0x6F, 0x00, 0x70, 0x70, 0x70, 0x00, 0x71, 0x71, 0x71, 0x00, 0x72, 0x72,
                                                  0x72, 0x00, 0x73, 0x73, 0x73, 0x00, 0x74, 0x74, 0x74, 0x00, 0x75, 0x75, 0x75, 0x00, 0x76, 0x76,
                                                  0x76, 0x00, 0x77, 0x77, 0x77, 0x00, 0x78, 0x78, 0x78, 0x00, 0x79, 0x79, 0x79, 0x00, 0x7A, 0x7A,
                                                  0x7A, 0x00, 0x7B, 0x7B, 0x7B, 0x00, 0x7C, 0x7C, 0x7C, 0x00, 0x7D, 0x7D, 0x7D, 0x00, 0x7E, 0x7E,
                                                  0x7E, 0x00, 0x7F, 0x7F, 0x7F, 0x00, 0x80, 0x80, 0x80, 0x00, 0x81, 0x81, 0x81, 0x00, 0x82, 0x82,
                                                  0x82, 0x00, 0x83, 0x83, 0x83, 0x00, 0x84, 0x84, 0x84, 0x00, 0x85, 0x85, 0x85, 0x00, 0x86, 0x86,
                                                  0x86, 0x00, 0x87, 0x87, 0x87, 0x00, 0x88, 0x88, 0x88, 0x00, 0x89, 0x89, 0x89, 0x00, 0x8A, 0x8A,
                                                  0x8A, 0x00, 0x8B, 0x8B, 0x8B, 0x00, 0x8C, 0x8C, 0x8C, 0x00, 0x8D, 0x8D, 0x8D, 0x00, 0x8E, 0x8E,
                                                  0x8E, 0x00, 0x8F, 0x8F, 0x8F, 0x00, 0x90, 0x90, 0x90, 0x00, 0x91, 0x91, 0x91, 0x00, 0x92, 0x92,
                                                  0x92, 0x00, 0x93, 0x93, 0x93, 0x00, 0x94, 0x94, 0x94, 0x00, 0x95, 0x95, 0x95, 0x00, 0x96, 0x96,
                                                  0x96, 0x00, 0x97, 0x97, 0x97, 0x00, 0x98, 0x98, 0x98, 0x00, 0x99, 0x99, 0x99, 0x00, 0x9A, 0x9A,
                                                  0x9A, 0x00, 0x9B, 0x9B, 0x9B, 0x00, 0x9C, 0x9C, 0x9C, 0x00, 0x9D, 0x9D, 0x9D, 0x00, 0x9E, 0x9E,
                                                  0x9E, 0x00, 0x9F, 0x9F, 0x9F, 0x00, 0xA0, 0xA0, 0xA0, 0x00, 0xA1, 0xA1, 0xA1, 0x00, 0xA2, 0xA2,
                                                  0xA2, 0x00, 0xA3, 0xA3, 0xA3, 0x00, 0xA4, 0xA4, 0xA4, 0x00, 0xA5, 0xA5, 0xA5, 0x00, 0xA6, 0xA6,
                                                  0xA6, 0x00, 0xA7, 0xA7, 0xA7, 0x00, 0xA8, 0xA8, 0xA8, 0x00, 0xA9, 0xA9, 0xA9, 0x00, 0xAA, 0xAA,
                                                  0xAA, 0x00, 0xAB, 0xAB, 0xAB, 0x00, 0xAC, 0xAC, 0xAC, 0x00, 0xAD, 0xAD, 0xAD, 0x00, 0xAE, 0xAE,
                                                  0xAE, 0x00, 0xAF, 0xAF, 0xAF, 0x00, 0xB0, 0xB0, 0xB0, 0x00, 0xB1, 0xB1, 0xB1, 0x00, 0xB2, 0xB2,
                                                  0xB2, 0x00, 0xB3, 0xB3, 0xB3, 0x00, 0xB4, 0xB4, 0xB4, 0x00, 0xB5, 0xB5, 0xB5, 0x00, 0xB6, 0xB6,
                                                  0xB6, 0x00, 0xB7, 0xB7, 0xB7, 0x00, 0xB8, 0xB8, 0xB8, 0x00, 0xB9, 0xB9, 0xB9, 0x00, 0xBA, 0xBA,
                                                  0xBA, 0x00, 0xBB, 0xBB, 0xBB, 0x00, 0xBC, 0xBC, 0xBC, 0x00, 0xBD, 0xBD, 0xBD, 0x00, 0xBE, 0xBE,
                                                  0xBE, 0x00, 0xBF, 0xBF, 0xBF, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xC1, 0xC1, 0xC1, 0x00, 0xC2, 0xC2,
                                                  0xC2, 0x00, 0xC3, 0xC3, 0xC3, 0x00, 0xC4, 0xC4, 0xC4, 0x00, 0xC5, 0xC5, 0xC5, 0x00, 0xC6, 0xC6,
                                                  0xC6, 0x00, 0xC7, 0xC7, 0xC7, 0x00, 0xC8, 0xC8, 0xC8, 0x00, 0xC9, 0xC9, 0xC9, 0x00, 0xCA, 0xCA,
                                                  0xCA, 0x00, 0xCB, 0xCB, 0xCB, 0x00, 0xCC, 0xCC, 0xCC, 0x00, 0xCD, 0xCD, 0xCD, 0x00, 0xCE, 0xCE,
                                                  0xCE, 0x00, 0xCF, 0xCF, 0xCF, 0x00, 0xD0, 0xD0, 0xD0, 0x00, 0xD1, 0xD1, 0xD1, 0x00, 0xD2, 0xD2,
                                                  0xD2, 0x00, 0xD3, 0xD3, 0xD3, 0x00, 0xD4, 0xD4, 0xD4, 0x00, 0xD5, 0xD5, 0xD5, 0x00, 0xD6, 0xD6,
                                                  0xD6, 0x00, 0xD7, 0xD7, 0xD7, 0x00, 0xD8, 0xD8, 0xD8, 0x00, 0xD9, 0xD9, 0xD9, 0x00, 0xDA, 0xDA,
                                                  0xDA, 0x00, 0xDB, 0xDB, 0xDB, 0x00, 0xDC, 0xDC, 0xDC, 0x00, 0xDD, 0xDD, 0xDD, 0x00, 0xDE, 0xDE,
                                                  0xDE, 0x00, 0xDF, 0xDF, 0xDF, 0x00, 0xE0, 0xE0, 0xE0, 0x00, 0xE1, 0xE1, 0xE1, 0x00, 0xE2, 0xE2,
                                                  0xE2, 0x00, 0xE3, 0xE3, 0xE3, 0x00, 0xE4, 0xE4, 0xE4, 0x00, 0xE5, 0xE5, 0xE5, 0x00, 0xE6, 0xE6,
                                                  0xE6, 0x00, 0xE7, 0xE7, 0xE7, 0x00, 0xE8, 0xE8, 0xE8, 0x00, 0xE9, 0xE9, 0xE9, 0x00, 0xEA, 0xEA,
                                                  0xEA, 0x00, 0xEB, 0xEB, 0xEB, 0x00, 0xEC, 0xEC, 0xEC, 0x00, 0xED, 0xED, 0xED, 0x00, 0xEE, 0xEE,
                                                  0xEE, 0x00, 0xEF, 0xEF, 0xEF, 0x00, 0xF0, 0xF0, 0xF0, 0x00, 0xF1, 0xF1, 0xF1, 0x00, 0xF2, 0xF2,
                                                  0xF2, 0x00, 0xF3, 0xF3, 0xF3, 0x00, 0xF4, 0xF4, 0xF4, 0x00, 0xF5, 0xF5, 0xF5, 0x00, 0xF6, 0xF6,
                                                  0xF6, 0x00, 0xF7, 0xF7, 0xF7, 0x00, 0xF8, 0xF8, 0xF8, 0x00, 0xF9, 0xF9, 0xF9, 0x00, 0xFA, 0xFA,
                                                  0xFA, 0x00, 0xFB, 0xFB, 0xFB, 0x00, 0xFC, 0xFC, 0xFC, 0x00, 0xFD, 0xFD, 0xFD, 0x00, 0xFE, 0xFE,
                                                  0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0x00 };

void Pre_allocate_bmp_header(unsigned int bitmap_width, unsigned int bitmap_height) {
  //https://web.maths.unsw.edu.au/~lafaye/CCM/video/format-bmp.htm
  //https://en.wikipedia.org/wiki/BMP_file_format
  unsigned int header_size = 54;                                                      //standard header total size
  unsigned int palette_size = 1024;                                                   //indexed RGB palette here R,G,B,0 * 256 colors
  unsigned int color_planes = 1;                                                      //must be 1
  unsigned int bits_per_pixel = 8;                                                    //Typical values are 1, 4, 8, 16, 24 and 32. Here 8 bits grayscale image
  unsigned long pixel_data_size = bitmap_width * bitmap_height * bits_per_pixel / 8;  //must be a multiple of 4, this is the size of the raw bitmap data
  unsigned long total_file_size = pixel_data_size + header_size + palette_size;       //The size of the BMP file in bytes
  unsigned long starting_pixel_data_offset = palette_size + header_size;              //offset at which pixel data are stored
  unsigned long header_intermediate_size = 40;                                        //Size of header in bytes after offset 0x0A, so header_intermediate_size + 0x0A = header_size
  unsigned long bitmap_width_pixels = bitmap_width;
  unsigned long bitmap_height_pixels = -bitmap_height;  //must be inverted to have the image NOT upside down, weird particularity of this format...
  unsigned long color_number_in_palette = 256;
  //The header field used to identify the BMP and DIB file is 0x42 0x4D in hexadecimal, same as BM in ASCII.
  BMP_header_generic[0] = 0x42;  //"B" in ASCII, BMP signature
  BMP_header_generic[1] = 0x4D;  //"M" in ASCII, BMP signatureBMP signature

  //The size of the BMP file in bytes
  BMP_header_generic[2] = total_file_size >> 0;
  BMP_header_generic[3] = total_file_size >> 8;
  BMP_header_generic[4] = total_file_size >> 16;
  BMP_header_generic[5] = total_file_size >> 24;

  //next bytes reserved, not used

  //The offset, i.e. starting address, of the byte where the bitmap image data (pixel array) can be found.
  BMP_header_generic[10] = starting_pixel_data_offset >> 0;
  BMP_header_generic[11] = starting_pixel_data_offset >> 8;
  BMP_header_generic[12] = starting_pixel_data_offset >> 16;
  BMP_header_generic[13] = starting_pixel_data_offset >> 24;

  //the size of this header, in bytes (40)
  BMP_header_generic[14] = header_intermediate_size >> 0;
  BMP_header_generic[15] = header_intermediate_size >> 8;
  BMP_header_generic[16] = header_intermediate_size >> 16;
  BMP_header_generic[17] = header_intermediate_size >> 24;

  //the bitmap width in pixels (signed integer)
  BMP_header_generic[18] = bitmap_width_pixels >> 0;
  BMP_header_generic[19] = bitmap_width_pixels >> 8;
  BMP_header_generic[20] = bitmap_width_pixels >> 16;
  BMP_header_generic[21] = bitmap_width_pixels >> 24;

  //the bitmap height in pixels (signed integer)
  BMP_header_generic[22] = bitmap_height_pixels >> 0;
  BMP_header_generic[23] = bitmap_height_pixels >> 8;
  BMP_header_generic[24] = bitmap_height_pixels >> 16;
  BMP_header_generic[25] = bitmap_height_pixels >> 24;

  //the number of color planes (must be 1)
  BMP_header_generic[26] = color_planes >> 0;
  BMP_header_generic[27] = color_planes >> 8;

  //the number of bits per pixel, which is the color depth of the image. Typical values are 1, 4, 8, 16, 24 and 32
  BMP_header_generic[28] = bits_per_pixel >> 0;
  BMP_header_generic[29] = bits_per_pixel >> 8;

  //next bytes, the compression method being used, not used

  //the image size. This is the size of the raw bitmap data; a dummy 0 can be given for BI_RGB bitmaps.
  BMP_header_generic[34] = pixel_data_size >> 0;
  BMP_header_generic[35] = pixel_data_size >> 8;
  BMP_header_generic[36] = pixel_data_size >> 16;
  BMP_header_generic[37] = pixel_data_size >> 24;

  //next bytes, horizontal resolution of the image. (pixel per metre, signed integer), not used

  //next bytes, vertical resolution of the image. (pixel per metre, signed integer), not used

  //the number of colors in the color palette, or 0 to default to 2^n
  BMP_header_generic[46] = color_number_in_palette >> 0;
  BMP_header_generic[47] = color_number_in_palette >> 8;
  BMP_header_generic[48] = color_number_in_palette >> 16;
  BMP_header_generic[49] = color_number_in_palette >> 24;

  //next bytes, the number of important colors used, or 0 when every color is important; generally ignored, not used
}
//////////////////////////////////////////////BMP stuff///////////////////////////////////////////////////////////////////////////////////////////